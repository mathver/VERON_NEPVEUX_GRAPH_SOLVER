"""Description.

Tests automatiques associés à la librairie conversion.
"""
import pytest
import numpy as np
from veron_nepveux_projet.lib_conversion import Tableaux, convertit
from veron_nepveux_projet.lib_probleme import Probleme


def test_tableaux():
    essai = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )
    assert isinstance(essai, Tableaux)


def test_dimensions_tableaux():
    with pytest.raises(ValueError):
        Tableaux(
            l=np.zeros(shape=(9,)),
            u=np.array([4.0, 1, 2, 3, 2, 1, 2, 2]),
            Aeq=np.array(
                [
                    [1, 0, -1, -1, 0, 0, 0, 0],
                    [0, 0, 0, 1, -1, 1, 0, 0],
                    [0, 1, 0, 0, 0, -1, -1, 0],
                    [0, 0, 0, 0, 0, 0, 1, -1],
                ]
            ),
            beq=np.zeros(shape=(4,)),
            c=np.array([-1, -1, 0, 0, 0, 0, 0, 0]),
        )
    with pytest.raises(ValueError):
        Tableaux(
            l=np.zeros(shape=(8,)),
            u=np.array([4.0, 1, 2, 3, 2, 1, 2, 2]),
            Aeq=np.array(
                [
                    [1, 0, -1, -1, 0, 0, 0, 0],
                    [0, 0, 0, 1, -1, 1, 0, 0],
                    [0, 1, 0, 0, 0, -1, -1, 0],
                    [0, 0, 0, 0, 0, 0, 1, -1],
                ]
            ),
            beq=np.zeros(shape=(4,)),
            c=np.array([-1, -1, 0, 0, 0, 0, 0, 0, 0]),
        )
    with pytest.raises(ValueError):
        Tableaux(
            l=np.zeros(shape=(8,)),
            u=np.array([4.0, 1, 2, 3, 2, 1, 2, 2]),
            Aeq=np.array(
                [
                    [1, 0, -1, -1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, -1, 1, 0, 0, 0],
                    [0, 1, 0, 0, 0, -1, -1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, -1, 0],
                ]
            ),
            beq=np.zeros(shape=(4,)),
            c=np.array([-1, -1, 0, 0, 0, 0, 0, 0]),
        )
    with pytest.raises(ValueError):
        Tableaux(
            l=np.zeros(shape=(8,)),
            u=np.array([4.0, 1, 2, 3, 2, 1, 2, 2]),
            Aeq=np.array(
                [
                    [1, 0, -1, -1, 0, 0, 0, 0],
                    [0, 0, 0, 1, -1, 1, 0, 0],
                    [0, 1, 0, 0, 0, -1, -1, 0],
                    [0, 0, 0, 0, 0, 0, 1, -1],
                ]
            ),
            beq=np.zeros(shape=(5,)),
            c=np.array([-1, -1, 0, 0, 0, 0, 0, 0]),
        )
    with pytest.raises(ValueError):
        Tableaux(
            l=np.zeros(shape=(8,)),
            u=np.array([4.0, 1, 2, 3, 2, 1, 2, 2]),
            Aeq=np.array([1, 0, -1, -1, 0, 0, 0, 0]),
            beq=np.zeros(shape=(4,)),
            c=np.array([-1, -1, 0, 0, 0, 0, 0, 0]),
        )


def test_convertit():
    probleme = Probleme(
        sommets=["a", "b", "c", "d", "e", "f", "g", "E", "S"],
        arretes=[
            ("E", "a", 5),
            ("E", "b", 10),
            ("E", "e", 8),
            ("a", "c", 7),
            ("a", "d", 10),
            ("b", "c", 8),
            ("b", "d", 2),
            ("b", "e", 1),
            ("c", "g", 7),
            ("d", "g", 4),
            ("d", "S", 6),
            ("d", "f", 2),
            ("e", "f", 4),
            ("f", "S", 6),
            ("g", "S", 10),
        ],
        source="E",
        puit="S",
        capacite_sommet=[
            ("a", 6),
            ("b", 7),
            ("c", 8),
            ("d", 6),
            ("e", 6),
            ("f", 5),
            ("g", 9),
            ("E", None),
            ("S", None),
        ],
    )
    attendu = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [
                5.0,
                10.0,
                8.0,
                7.0,
                10.0,
                8.0,
                2.0,
                1.0,
                7.0,
                4.0,
                6.0,
                2.0,
                4.0,
                6.0,
                10.0,
            ]
        ),
        Aeq=np.array(
            [
                [1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([-1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    )
    assert convertit(probleme) == attendu


def test_fonction__eq__type_general():
    autre = ["a", "b", "c", "d", "e", "f", "g", "E", "S"]

    essai = convertit(
        Probleme(
            sommets=["a", "b", "c", "d", "e", "f", "g", "E", "S"],
            arretes=[
                ("E", "a", 5),
                ("E", "b", 10),
                ("E", "e", 8),
                ("a", "c", 7),
                ("a", "d", 10),
                ("b", "c", 8),
                ("b", "d", 2),
                ("b", "e", 1),
                ("c", "g", 7),
                ("d", "g", 4),
                ("d", "S", 6),
                ("d", "f", 2),
                ("e", "f", 4),
                ("f", "S", 6),
                ("g", "S", 10),
            ],
            source="E",
            puit="S",
            capacite_sommet=[
                ("a", 6),
                ("b", 7),
                ("c", 8),
                ("d", 6),
                ("e", 6),
                ("f", 5),
                ("g", 9),
                ("E", None),
                ("S", None),
            ],
        )
    )

    assert essai.__eq__(autre) is False


def test_fonction__eq__l():
    autre = Tableaux(
        l=np.array([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    essai_converti = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    assert essai_converti.__eq__(autre) is False


def test_fonction__eq__u():
    autre = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 6.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    essai_converti = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    assert essai_converti.__eq__(autre) is False


def test_fonction__eq__Aeq():
    autre = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    essai_converti = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    assert essai_converti.__eq__(autre) is False


def test_fonction__eq__beq():
    autre = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    essai_converti = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 2, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    assert essai_converti.__eq__(autre) is False


def test_fonction__eq__c():
    autre = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    essai_converti = Tableaux(
        l=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        u=np.array(
            [6.0, 6.0, 7.0, 2.0, 1.0, 7.0, 4.0, 6.0, 2.0, 4.0, 5.0, 9.0, 5.0, 10.0, 8.0]
        ),
        Aeq=np.array(
            [
                [-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0],
            ]
        ),
        beq=np.array([0, 0, 0, 0, 0, 0, 0]),
        c=np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1]),
    )

    assert essai_converti.__eq__(autre) is False
